//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        r_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        r_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
        };

        r_backspace_word {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <6 7 8>;
        };

        r_backspace_line {
            bindings = <&none>;
            key-positions = <6 7 8 9>;
        };

        r_delete {
            bindings = <&kp DELETE>;
            key-positions = <9 8>;
        };

        r_delete_word {
            bindings = <&kp LC(DELETE)>;
            key-positions = <9 8 7>;
        };

        r_searchF {
            bindings = <&kp LC(F)>;
            key-positions = <6 5>;
        };

        r_searchK {
            bindings = <&kp LC(K)>;
            key-positions = <16 15>;
        };

        r_close_window {
            bindings = <&kp LC(W)>;
            key-positions = <28 29>;
        };

        r_close_app {
            bindings = <&kp LA(F4)>;
            key-positions = <29 30 28>;
        };

        l_cut {
            bindings = <&kp LC(X)>;
            key-positions = <22 23 21>;
        };

        l_copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        l_paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
        };

        l_tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        l_undo {
            bindings = <&kp LC(Z)>;
            key-positions = <22 21>;
        };

        l_cycle_tab_left {
            bindings = <&kp LS(LC(TAB))>;
            key-positions = <11 12>;
        };

        l_cycle_tab_right {
            bindings = <&kp LC(TAB)>;
            key-positions = <12 13>;
        };

        r_end {
            bindings = <&kp END>;
            key-positions = <18 17>;
        };

        r_previous_word {
            bindings = <&kp RC(LEFT_ARROW)>;
            key-positions = <17 16>;
        };

        l_cycle_desktop_right {
            bindings = <&kp LC(LA(RIGHT_ARROW))>;
            key-positions = <11 12 13>;
        };

        l_cycle_desktop_left {
            bindings = <&kp LC(LA(LEFT_ARROW))>;
            key-positions = <1 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        Main {
            label = "MAIN";
            bindings = <
                         &kp Q  &kp W  &kp F         &kp P  &kp G                 &kp J                  &kp L  &kp U                &kp Y             &mt QUESTION EXCLAMATION
                         &kp A  &kp R  &kp S         &kp T  &kp D                 &kp H                  &kp N  &kp E                &kp I             &kp O
&mt LEFT_CONTROL ESCAPE  &kp Z  &kp X  &kp C         &kp V  &kp B                 &kp K                  &kp M  &mt SEMICOLON COMMA  &mt COLON PERIOD  &mt BACKSLASH SLASH       &mt DOUBLE_QUOTES SINGLE_QUOTE
                                       &kp LEFT_GUI  &none  &mt LEFT_ALT SPACE    &mt RIGHT_SHIFT SPACE  &none  &kp RG(SPACE)
            >;
        };

        Navigation {
            label = "NAV";
            bindings = <
             &none  &kp TAB         &kp UP_ARROW    &kp LEFT_SHIFT   &kp C_VOLUME_UP      &msc SCRL_DOWN          &mkp LCLK       &mmv MOVE_UP             &mkp RCLK        &mt HOME PAGE_UP
             &none  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp C_VOLUME_DOWN    &msc SCRL_UP            &mmv MOVE_LEFT  &mmv MOVE_DOWN           &mmv MOVE_RIGHT  &mt END PAGE_DOWN
&kp C_POWER  &none  &none           &mt LC(F5) F5   &none            &kp K_MUTE           &kp RIGHT_ALT           &msc SCRL_LEFT  &kp LG(SPACE)            &msc SCRL_RIGHT  &kp RIGHT_COMMAND  &kp K_LOCK
                                    &none           &to 2            &kp LEFT_CONTROL     &kp LA(LC(LEFT_ARROW))  &to 0           &kp LA(LC(RIGHT_ARROW))
            >;
        };

        Math {
            bindings = <
       &none  &none  &none       &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp EQUAL  &kp N7  &kp N8      &kp N9  &kp NUMBER_0
       &none  &none  &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PLUS   &kp N4  &kp N5      &kp N6  &kp ASTERISK
&none  &none  &none  &none       &kp LESS_THAN         &kp GREATER_THAN         &kp MINUS  &kp N1  &kp N2      &kp N3  &kp SLASH     &kp PERCENT
                     &none       &to 0                 &none                    &none      &to 1   &kp PERIOD
            >;

            label = "MATH";
        };

        Symbols {
            label = "SYM";
            bindings = <
       &kp HASH   &none  &none       &kp LEFT_BRACKET      &kp RIGHT_BRACKET        &kp EQUAL  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp QUESTION     &none
       &kp AT     &none  &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS    &kp PLUS   &none           &none            &kp EXCLAMATION  &kp ASTERISK
&none  &kp CARET  &none  &none       &kp LESS_THAN         &kp GREATER_THAN         &kp MINUS  &kp UNDERSCORE  &kp TILDE        &kp PIPE         &kp SLASH     &kp PERCENT
                         &none       &to 0                 &none                    &none      &none           &none
            >;
        };
    };
};
